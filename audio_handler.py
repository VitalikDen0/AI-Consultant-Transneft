#!/usr/bin/env python3
"""
Audio Handler Module

–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–æ–≤.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ API —Ä–µ—à–µ–Ω–∏—è, —Ç–∞–∫ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏.
"""

import os
import io
import wave
import json
import tempfile
import threading
from typing import Optional, Dict, Any, Callable, Union
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ config.py
try:
    import config as app_config
except ImportError:
    raise ImportError("‚ùå config.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.py —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.")

# –ò–º–ø–æ—Ä—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
pyaudio = None
sr = None
pyttsx3 = None
requests = None
AudioSegment = None
play = None
np = None

try:
    import pyaudio
except ImportError:
    pyaudio = None

try:
    import speech_recognition as sr
except ImportError:
    sr = None

try:
    import pyttsx3
except ImportError:
    pyttsx3 = None

try:
    import requests
except ImportError:
    requests = None

try:
    from pydub import AudioSegment
    from pydub.playback import play
except ImportError:
    AudioSegment = None
    play = None

try:
    import numpy as np
except ImportError:
    np = None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
MISSING_DEPS = []
if sr is None:
    MISSING_DEPS.append('speechrecognition')
if pyttsx3 is None:
    MISSING_DEPS.append('pyttsx3')
if pyaudio is None:
    MISSING_DEPS.append('pyaudio')
if requests is None:
    MISSING_DEPS.append('requests')
if np is None:
    MISSING_DEPS.append('numpy')

if MISSING_DEPS:
    print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞—É–¥–∏–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(MISSING_DEPS)}")
    print("–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install " + ' '.join(MISSING_DEPS))

class AudioConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞—É–¥–∏–æ –º–æ–¥—É–ª—è"""
    
    def __init__(self, config_path: Optional[str] = None):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—ë –∏–∑ config.py
        self._load_from_python_config()
    
    def _load_from_python_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ config.py"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        self.stt_engine = app_config.STT_ENGINE
        self.stt_language = app_config.STT_LANGUAGE
        self.stt_enabled = app_config.STT_ENABLED
        self.whisper_api_key = app_config.WHISPER_API_KEY
        self.whisper_api_url = app_config.WHISPER_API_URL
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
        self.tts_engine = app_config.TTS_ENGINE
        self.tts_voice = app_config.TTS_VOICE
        self.tts_rate = app_config.TTS_RATE
        self.tts_volume = app_config.TTS_VOLUME
        self.tts_enabled = app_config.TTS_ENABLED
        self.auto_play = app_config.TTS_AUTO_PLAY
        
        # API –∫–ª—é—á–∏
        self.elevenlabs_api_key = app_config.ELEVENLABS_API_KEY
        self.elevenlabs_voice_id = app_config.ELEVENLABS_VOICE_ID
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–∏—Å–∏
        self.sample_rate = app_config.AUDIO_SAMPLE_RATE
        self.chunk_size = app_config.AUDIO_CHUNK_SIZE
        self.channels = 1  # –í—Å–µ–≥–¥–∞ –º–æ–Ω–æ
        self.record_timeout = 10  # –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏
        
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ config.py")

class SpeechRecognizer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"""
    
    def __init__(self, config: AudioConfig):
        self.config = config
        self.recognizer = None
        self.microphone = None
        self._initialize_recognizer()
    
    def _initialize_recognizer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è —Ä–µ—á–∏"""
        if not self.config.stt_enabled or sr is None:
            if sr is None:
                print("‚ö†Ô∏è  speechrecognition –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self.config.stt_enabled = False
            return
            
        try:
            self.recognizer = sr.Recognizer()
            if pyaudio is not None:
                self.microphone = sr.Microphone(sample_rate=self.config.sample_rate)
                
                # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —à—É–º–∞
                with self.microphone as source:
                    self.recognizer.adjust_for_ambient_noise(source, duration=1)
            else:
                print("‚ö†Ô∏è  pyaudio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self.config.stt_enabled = False
                return
                
            print("üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            self.config.stt_enabled = False
    
    def listen_for_speech(self, timeout: Optional[int] = None) -> Optional[str]:
        """
        –°–ª—É—à–∞–µ—Ç —Ä–µ—á—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not self.config.stt_enabled or not self.recognizer or not self.microphone:
            return None
        
        timeout = timeout or self.config.record_timeout
        
        try:
            print("üé§ –ì–æ–≤–æ—Ä–∏—Ç–µ... (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
            
            with self.microphone as source:
                # –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ
                audio = self.recognizer.listen(source, timeout=timeout, phrase_time_limit=30)
            
            print("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")
            
            # –í—ã–±–æ—Ä –¥–≤–∏–∂–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            if self.config.stt_engine == 'google' and self.recognizer:
                # type: ignore - –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ recognizer –Ω–µ None
                text = self.recognizer.recognize_google(audio, language=self.config.stt_language)  # type: ignore
            elif self.config.stt_engine == 'whisper_api':
                text = self._recognize_with_whisper_api(audio)
            elif self.config.stt_engine == 'local_whisper':
                text = self._recognize_with_local_whisper(audio)
            else:
                if self.recognizer:
                    # type: ignore - –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ recognizer –Ω–µ None
                    text = self.recognizer.recognize_google(audio, language=self.config.stt_language)  # type: ignore
                else:
                    raise RuntimeError("Google Speech Recognition –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            return text
            
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π sr, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω
            if sr is not None:
                if isinstance(e, sr.WaitTimeoutError):
                    print("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏")
                    return None
                elif isinstance(e, sr.UnknownValueError):
                    print("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
                    return None
                elif isinstance(e, sr.RequestError):
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
                    return None
            
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            return None
    
    def _recognize_with_whisper_api(self, audio) -> str:
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Whisper API"""
        if not self.config.whisper_api_key:
            raise Exception("Whisper API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if requests is None:
            raise Exception("requests –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV —Ñ–æ—Ä–º–∞—Ç
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp_file:
            with wave.open(tmp_file.name, 'wb') as wav_file:
                wav_file.setnchannels(1)
                wav_file.setsampwidth(2)
                wav_file.setframerate(self.config.sample_rate)
                wav_file.writeframes(audio.get_wav_data())
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ Whisper API
            with open(tmp_file.name, 'rb') as audio_file:
                headers = {'Authorization': f'Bearer {self.config.whisper_api_key}'}
                files = {'file': audio_file}
                data = {'model': 'whisper-1', 'language': 'ru'}
                
                response = requests.post(self.config.whisper_api_url, headers=headers, files=files, data=data)
                response.raise_for_status()
                
                result = response.json()
                text = result.get('text', '')
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            try:
                os.unlink(tmp_file.name)
            except:
                pass
            
            return text
    
    def _recognize_with_local_whisper(self, audio) -> str:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Whisper"""
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é Whisper
        print("üîß –õ–æ–∫–∞–ª—å–Ω—ã–π Whisper –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Google")
        if self.recognizer is not None:
            if self.recognizer:
                # type: ignore - –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ recognizer –Ω–µ None
                return self.recognizer.recognize_google(audio, language=self.config.stt_language)  # type: ignore
            else:
                raise RuntimeError("Google Speech Recognition –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            raise Exception("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

class TextToSpeech:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏"""
    
    def __init__(self, config: AudioConfig):
        self.config = config
        self.engine = None
        self._initialize_tts()
    
    def _initialize_tts(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS –¥–≤–∏–∂–∫–∞"""
        if not self.config.tts_enabled or pyttsx3 is None:
            if pyttsx3 is None:
                print("‚ö†Ô∏è  pyttsx3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self.config.tts_enabled = False
            return
            
        try:
            if self.config.tts_engine == 'pyttsx3':
                self.engine = pyttsx3.init()
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ–ª–æ—Å–∞ (–≤—ã–±–∏—Ä–∞–µ–º –º—É–∂—Å–∫–æ–π —Ä—É—Å—Å–∫–∏–π)
                voices = self.engine.getProperty('voices')
                male_voice_found = False
                
                if voices:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ voices –Ω–µ None
                    try:
                        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –º—É–∂—Å–∫–æ–π —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
                        for voice in voices:  # type: ignore
                            if hasattr(voice, 'name') and hasattr(voice, 'id'):
                                name_lower = voice.name.lower()
                                id_lower = voice.id.lower()
                                
                                # –ò—â–µ–º –º—É–∂—Å–∫–æ–π —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                                if ('russian' in name_lower or 'ru' in id_lower) and \
                                   ('male' in name_lower or 'ivan' in name_lower or 'dmitry' in name_lower):
                                    self.engine.setProperty('voice', voice.id)
                                    male_voice_found = True
                                    print(f"üéôÔ∏è –í—ã–±—Ä–∞–Ω –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å: {voice.name}")
                                    break
                        
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –º—É–∂—Å–∫–æ–π, –±–µ—Ä—ë–º –ª—é–±–æ–π —Ä—É—Å—Å–∫–∏–π
                        if not male_voice_found:
                            for voice in voices:  # type: ignore
                                if hasattr(voice, 'name') and hasattr(voice, 'id'):
                                    if 'russian' in voice.name.lower() or 'ru' in voice.id.lower():
                                        self.engine.setProperty('voice', voice.id)
                                        print(f"üéôÔ∏è –í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: {voice.name}")
                                        break
                    except (TypeError, AttributeError):
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å —Ç–∏–ø–∞–º–∏
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 20% –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è)
                faster_rate = int(self.config.tts_rate * 1.2)
                self.engine.setProperty('rate', faster_rate)
                self.engine.setProperty('volume', self.config.tts_volume)
                
                print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏: {faster_rate} —Å–ª–æ–≤/–º–∏–Ω")
                
            print("üîä –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {e}")
            self.config.tts_enabled = False
    
    def speak_text(self, text: str, play_async: bool = True) -> Optional[str]:
        """
        –û–∑–≤—É—á–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç
        """
        if not self.config.tts_enabled or not text.strip():
            return None
        
        try:
            if self.config.tts_engine == 'pyttsx3':
                return self._speak_with_pyttsx3(text, play_async)
            elif self.config.tts_engine == 'elevenlabs':
                return self._speak_with_elevenlabs(text, play_async)
            elif self.config.tts_engine == 'local_tts':
                return self._speak_with_local_tts(text, play_async)
            else:
                return self._speak_with_pyttsx3(text, play_async)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
            return None
    
    def _speak_with_pyttsx3(self, text: str, play_async: bool) -> Optional[str]:
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ pyttsx3"""
        if not self.engine or not hasattr(self.engine, 'say'):
            return None
        
        def speak():
            try:
                if self.engine and hasattr(self.engine, 'say') and hasattr(self.engine, 'runAndWait'):
                    self.engine.say(text)
                    self.engine.runAndWait()
                else:
                    print("‚ùå TTS Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")
        
        if play_async:
            thread = threading.Thread(target=speak, daemon=True)
            thread.start()
            return "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"
        else:
            speak()
            return "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    
    def _speak_with_elevenlabs(self, text: str, play_async: bool) -> Optional[str]:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è ElevenLabs API"""
        if not self.config.elevenlabs_api_key:
            print("üîß ElevenLabs API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è pyttsx3")
            return self._speak_with_pyttsx3(text, play_async)
        
        # TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è ElevenLabs API
        print("üîß ElevenLabs API –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è pyttsx3")
        return self._speak_with_pyttsx3(text, play_async)
    
    def _speak_with_local_tts(self, text: str, play_async: bool) -> Optional[str]:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ TTS"""
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ª–æ–∫–∞–ª—å–Ω–æ–π TTS –º–æ–¥–µ–ª—å—é
        print("üîß –õ–æ–∫–∞–ª—å–Ω—ã–π TTS –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è pyttsx3")
        return self._speak_with_pyttsx3(text, play_async)

class AudioHandler:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ"""
    
    def __init__(self, config_path: Optional[str] = None):
        self.config = AudioConfig(config_path)
        self.speech_recognizer = SpeechRecognizer(self.config)
        self.tts = TextToSpeech(self.config)
        
        # –î–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞
        self.is_listening = False
        self.audio_stream = None
        self.audio_frames = []
        self.last_speech_time = None
        
        # –ü–æ—Ä–æ–≥–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ config.py)
        self.silence_threshold = app_config.SILENCE_THRESHOLD
        self.inactivity_timeout = app_config.INACTIVITY_TIMEOUT
        self.volume_threshold = app_config.VOICE_VOLUME_THRESHOLD
        
        self.recording_thread = None
        self.pyaudio_instance = None
        
        print("üéµ –ê—É–¥–∏–æ –º–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.print_status()
    
    def print_status(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –∞—É–¥–∏–æ –º–æ–¥—É–ª—è"""
        print(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏: {'‚úÖ' if self.config.stt_enabled else '‚ùå'} ({self.config.stt_engine})")
        print(f"üîä –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏: {'‚úÖ' if self.config.tts_enabled else '‚ùå'} ({self.config.tts_engine})")
    
    def listen_for_question(self, timeout: Optional[int] = None) -> Optional[str]:
        """
        –°–ª—É—à–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        return self.speech_recognizer.listen_for_speech(timeout)
    
    def speak_answer(self, answer: str, play_async: Optional[bool] = None) -> Optional[str]:
        """
        –û–∑–≤—É—á–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç
        """
        actual_async = play_async if play_async is not None else self.config.auto_play
        return self.tts.speak_text(answer, actual_async)
    
    def is_speech_recognition_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"""
        return self.config.stt_enabled
    
    def is_text_to_speech_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏"""
        return self.config.tts_enabled
    
    def toggle_stt(self, enabled: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"""
        self.config.stt_enabled = enabled
        print(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏: {'–≤–∫–ª—é—á–µ–Ω–æ' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}")
    
    def toggle_tts(self, enabled: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏"""
        self.config.tts_enabled = enabled
        print(f"üîä –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏: {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    
    def start_listening(self) -> Dict[str, Any]:
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–∞—É–∑
        
        –õ–æ–≥–∏–∫–∞:
        - 2 —Å–µ–∫—É–Ω–¥—ã –º–æ–ª—á–∞–Ω–∏—è ‚Üí –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
        - 5 —Å–µ–∫—É–Ω–¥ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è ‚Üí –ø–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        - –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∑–∞–ø–∏—Å—å
        """
        if not self.config.stt_enabled or not self.speech_recognizer.recognizer:
            return {'status': 'error', 'message': '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}
        
        if self.is_listening:
            return {'status': 'already_listening'}
        
        if np is None:
            return {'status': 'error', 'message': 'numpy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
        
        if pyaudio is None:
            return {'status': 'error', 'message': 'pyaudio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
        
        try:
            import time
            
            self.is_listening = True
            self.audio_frames = []
            self.last_speech_time = time.time()
            
            if pyaudio is None:
                raise Exception("PyAudio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            self.pyaudio_instance = pyaudio.PyAudio()
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫
            self.audio_stream = self.pyaudio_instance.open(
                format=pyaudio.paInt16,
                channels=1,
                rate=self.config.sample_rate,
                input=True,
                frames_per_buffer=self.config.chunk_size
            )
            
            print("üé§ –ù–∞—á–∞—Ç–∞ –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ (2 —Å–µ–∫ –º–æ–ª—á–∞–Ω–∏—è = –æ—Ç–ø—Ä–∞–≤–∫–∞, 5 —Å–µ–∫ = –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ)")
            
            def recording_worker():
                """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
                import time
                
                silence_start = None
                has_speech = False
                
                while self.is_listening:
                    try:
                        # –ß—Ç–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
                        audio_data = self.audio_stream.read(self.config.chunk_size, exception_on_overflow=False)
                        self.audio_frames.append(audio_data)
                        
                        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
                        audio_array = np.frombuffer(audio_data, dtype=np.int16)
                        volume = np.abs(audio_array).mean()
                        
                        current_time = time.time()
                        
                        # –ï—Å–ª–∏ –≥—Ä–æ–º–∫–æ—Å—Ç—å –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ - –µ—Å—Ç—å —Ä–µ—á—å
                        if volume > self.volume_threshold:
                            has_speech = True
                            silence_start = None
                            self.last_speech_time = current_time
                        else:
                            # –¢–∏—à–∏–Ω–∞
                            if has_speech and silence_start is None:
                                silence_start = current_time
                            
                            if silence_start:
                                silence_duration = current_time - silence_start
                                
                                # 2 —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã –ø–æ—Å–ª–µ —Ä–µ—á–∏ = –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                                if silence_duration >= self.silence_threshold and has_speech:
                                    print("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∞—É–∑–∞ 2 —Å–µ–∫ - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...")
                                    self._process_recorded_audio()
                                    
                                    # –°–±—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ñ—Ä–∞–∑—ã
                                    self.audio_frames = []
                                    has_speech = False
                                    silence_start = None
                                    # –û–±–Ω–æ–≤–ª—è–µ–º last_speech_time —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—â—ë 5 —Å–µ–∫—É–Ω–¥
                                    self.last_speech_time = current_time
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è (5 —Å–µ–∫—É–Ω–¥)
                        if current_time - self.last_speech_time > self.inactivity_timeout:
                            print("‚è∞ –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥ - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
                            self.stop_listening()
                            break
                        
                        time.sleep(0.01)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
                        break
                
                print("üõë –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –∑–∞–ø–∏—Å–∏
            self.recording_thread = threading.Thread(target=recording_worker, daemon=True)
            self.recording_thread.start()
            
            return {'status': 'started', 'message': '–ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å'}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –∑–∞–ø–∏—Å–∏: {e}")
            self.is_listening = False
            return {'status': 'error', 'message': str(e)}
    
    def _process_recorded_audio(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ)"""
        if not self.audio_frames or len(self.audio_frames) < 10:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ—Ä–µ–π–º–æ–≤ –º–∞–ª–æ (< 0.25 —Å–µ–∫) - —ç—Ç–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            return
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã –≤ –æ–¥–∏–Ω WAV
            import wave
            import io
            
            wav_buffer = io.BytesIO()
            with wave.open(wav_buffer, 'wb') as wf:
                wf.setnchannels(1)
                wf.setsampwidth(2)  # 16-bit audio = 2 bytes
                wf.setframerate(self.config.sample_rate)
                wf.writeframes(b''.join(self.audio_frames))
            
            wav_buffer.seek(0)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ speech_recognition
            if sr and self.speech_recognizer.recognizer:
                audio_data = sr.AudioData(wav_buffer.read(), self.config.sample_rate, 2)
                
                try:
                    text = self.speech_recognizer.recognizer.recognize_google(
                        audio_data, 
                        language=self.config.stt_language
                    )
                    
                    if text:
                        print(f"üó£Ô∏è  –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
                        # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–µ—Ä–µ–∑ callback
                        self._on_text_recognized(text)
                    
                except sr.UnknownValueError:
                    print("‚ùì –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
                except sr.RequestError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
    
    def _on_text_recognized(self, text: str):
        """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
        # –í Flask endpoint –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å websocket –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
        pass
    
    def stop_listening(self) -> Optional[str]:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞"""
        if not self.is_listening:
            return None
        
        self.is_listening = False
        
        try:
            if self.audio_stream:
                self.audio_stream.stop_stream()
                self.audio_stream.close()
                self.audio_stream = None
            
            if self.pyaudio_instance:
                self.pyaudio_instance.terminate()
                self.pyaudio_instance = None
            
            print("üõë –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
            # –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ—Ä–µ–π–º—ã - –æ–Ω–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ —ç—Ç–æ —Ç–∞–π–º–∞—É—Ç
            # (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ recording_worker –ø—Ä–∏ –ø–∞—É–∑–µ 2 —Å–µ–∫)
            
            return "–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return None
    
    def resume_listening(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        if not self.is_listening:
            return self.start_listening()
        return {'status': 'already_listening'}

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –º–æ–¥—É–ª—è...")
    
    audio_handler = AudioHandler()
    
    if audio_handler.is_speech_recognition_available():
        print("\nüé§ –¢–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:")
        text = audio_handler.listen_for_question(timeout=5)
        if text:
            print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
            
            if audio_handler.is_text_to_speech_available():
                print("\nüîä –¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:")
                audio_handler.speak_answer(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}", play_async=False)
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")