"""
–ò–º–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–π –≤ glTF –¥–ª—è –≤–µ–±–∞
"""

import bpy
import os

print("üöÄ –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–π...")

PROJECT_PATH = r"C:\Users\vital\Desktop\Hackathon"
MODEL_DIR = os.path.join(PROJECT_PATH, "3D")
OUTPUT_PATH = os.path.join(PROJECT_PATH, "static", "models", "transneft_character.glb")

# –û—á–∏—Å—Ç–∫–∞ —Å—Ü–µ–Ω—ã
if bpy.context.mode != 'OBJECT':
    bpy.ops.object.mode_set(mode='OBJECT')
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete()

# ========== –ò–ú–ü–û–†–¢ –ë–ê–ó–û–í–û–ô –ú–û–î–ï–õ–ò –° –°–ö–ï–õ–ï–¢–û–ú ==========

print("üì¶ –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–π FBX –º–æ–¥–µ–ª–∏ —Å–æ —Å–∫–µ–ª–µ—Ç–æ–º...")
base_fbx = os.path.join(MODEL_DIR, "Idle.fbx")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Idle –∫–∞–∫ –±–∞–∑—É (—Å–æ —Å–∫–µ–ª–µ—Ç–æ–º)

# –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–≤–æ–≥–æ FBX –∫–∞–∫ –æ—Å–Ω–æ–≤—ã
try:
    bpy.ops.wm.fbx_import(filepath=base_fbx)
    print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–æ–≤—ã–π API –∏–º–ø–æ—Ä—Ç–∞ (Blender 4.x)")
except AttributeError:
    bpy.ops.import_scene.fbx(filepath=base_fbx)
    print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—Ç–∞—Ä—ã–π API –∏–º–ø–æ—Ä—Ç–∞ (Blender 3.x)")

# –ü–æ–ª—É—á–∏—Ç—å –∞—Ä–ºature –∏ –º–æ–¥–µ–ª—å
armature = None
model = None

for obj in bpy.context.selected_objects:
    if obj.type == 'ARMATURE':
        armature = obj
        armature.name = "CharacterArmature"
    elif obj.type == 'MESH':
        model = obj
        model.name = "Character"

if not armature:
    print("‚ùå –û–®–ò–ë–ö–ê: –ê—Ä–ºature –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FBX!")
    raise Exception("–ê—Ä–ºature –Ω–µ –Ω–∞–π–¥–µ–Ω")

if not model:
    print("‚ùå –û–®–ò–ë–ö–ê: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ FBX!")
    raise Exception("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

print(f"   ‚úÖ –ê—Ä–ºature: {armature.name}")
print(f"   ‚úÖ –ú–æ–¥–µ–ª—å: {model.name}")

# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é Idle
if armature.animation_data and armature.animation_data.action:
    base_action = armature.animation_data.action
    base_action.name = "Idle"
    print(f"   ‚úÖ –ë–∞–∑–æ–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è Idle —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

# ========== –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –¢–ï–ö–°–¢–£–†–´ –ò–ó OBJ ==========

print("üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –∏–∑ OBJ...")
texture_png = os.path.join(MODEL_DIR, "Bot.png")

if os.path.exists(texture_png):
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É
    texture_image = bpy.data.images.load(texture_png)
    print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞: {os.path.basename(texture_png)}")
    
    # –°–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π
    mat = bpy.data.materials.new(name="Character_Material")
    mat.use_nodes = True
    nodes = mat.node_tree.nodes
    links = mat.node_tree.links
    
    # –û—á–∏—Å—Ç–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–æ–¥—ã
    nodes.clear()
    
    # –°–æ–∑–¥–∞—Ç—å Principled BSDF
    bsdf = nodes.new('ShaderNodeBsdfPrincipled')
    bsdf.location = (0, 0)
    
    # –°–æ–∑–¥–∞—Ç—å –Ω–æ–¥ —Ç–µ–∫—Å—Ç—É—Ä—ã
    tex_node = nodes.new('ShaderNodeTexImage')
    tex_node.image = texture_image
    tex_node.location = (-300, 0)
    
    # –°–æ–∑–¥–∞—Ç—å Material Output
    output = nodes.new('ShaderNodeOutputMaterial')
    output.location = (300, 0)
    
    # –°–≤—è–∑–∞—Ç—å –Ω–æ–¥—ã
    links.new(tex_node.outputs['Color'], bsdf.inputs['Base Color'])
    links.new(bsdf.outputs['BSDF'], output.inputs['Surface'])
    
    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∫ –º–æ–¥–µ–ª–∏
    if model.data.materials:
        model.data.materials[0] = mat
    else:
        model.data.materials.append(mat)
    
    print(f"   ‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ –º–æ–¥–µ–ª–∏ {model.name}")
else:
    print(f"   ‚ö†Ô∏è –¢–µ–∫—Å—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {texture_png}")

# ========== –ò–ú–ü–û–†–¢ –û–°–¢–ê–õ–¨–ù–´–• –ê–ù–ò–ú–ê–¶–ò–ô ==========

animations = {
    "Hello": "Hello.fbx",
    "Talking": "Talking.fbx",
    "Thinking": "Thinking.fbx"
}

print("\nüé¨ –ò–º–ø–æ—Ä—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π...")

for anim_name, fbx_file in animations.items():
    fbx_path = os.path.join(MODEL_DIR, fbx_file)
    
    if not os.path.exists(fbx_path):
        print(f"   ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {fbx_file}")
        continue
    
    # –ò–º–ø–æ—Ä—Ç FBX —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    try:
        bpy.ops.wm.fbx_import(filepath=fbx_path, use_anim=True)
    except AttributeError:
        bpy.ops.import_scene.fbx(filepath=fbx_path, use_anim=True)
    
    # –ù–∞–π—Ç–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–ºature –∏ –µ–≥–æ action
    imported_objects = list(bpy.context.selected_objects)
    imported_arm = None
    
    for obj in imported_objects:
        if obj.type == 'ARMATURE':
            imported_arm = obj
            break
    
    if imported_arm and imported_arm.animation_data and imported_arm.animation_data.action:
        # –í–∑—è—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
        action = imported_arm.animation_data.action
        action.name = anim_name
        print(f"   ‚úÖ {anim_name}: {len(action.fcurves)} fcurves")
    
    # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–∞–Ω–∏–º–∞—Ü–∏—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ bpy.data.actions)
    for obj in list(imported_objects):
        try:
            if obj.name in bpy.data.objects:
                bpy.data.objects.remove(obj)
        except ReferenceError:
            pass  # –û–±—ä–µ–∫—Ç —É–∂–µ —É–¥–∞–ª—ë–Ω

# ========== –ü–†–û–í–ï–†–ö–ê –ü–†–ò–í–Ø–ó–ö–ò ==========

print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∫ —Å–∫–µ–ª–µ—Ç—É...")

if model.parent == armature:
    print("   ‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–∫–µ–ª–µ—Ç—É")
else:
    print("   ‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º...")
    bpy.ops.object.select_all(action='DESELECT')
    model.select_set(True)
    armature.select_set(True)
    bpy.context.view_layer.objects.active = armature
    bpy.ops.object.parent_set(type='ARMATURE_AUTO')
    print("   ‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

# ========== –≠–ö–°–ü–û–†–¢ ==========

print("\nüì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ glTF...")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π:")
for name in ["Hello", "Idle", "Talking", "Thinking"]:
    action = bpy.data.actions.get(name)
    if action:
        print(f"   ‚úÖ {name} ({len(action.fcurves)} fcurves)")
    else:
        print(f"   ‚ö†Ô∏è  {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

os.makedirs(os.path.dirname(OUTPUT_PATH), exist_ok=True)

bpy.ops.export_scene.gltf(
    filepath=OUTPUT_PATH,
    export_format='GLB',
    export_animations=True,
    use_selection=False
)

file_size = os.path.getsize(OUTPUT_PATH) / 1024
print(f"\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {OUTPUT_PATH}")
print(f"üì¶ –†–∞–∑–º–µ—Ä: {file_size:.1f} KB")
print("\nüéâ –ì–æ—Ç–æ–≤–æ! –ó–∞–ø—É—Å—Ç–∏ web_app.py –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
