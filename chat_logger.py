"""
Chat Logger - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –≤ web —Ä–µ–∂–∏–º–µ, —Ç–∞–∫ –∏ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º
"""

import os
from datetime import datetime
from pathlib import Path
from typing import Optional


class ChatLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç-–¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self, log_dir: str = "chat_logs", session_name: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        
        Args:
            log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
            session_name: –ò–º—è —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ None - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        """
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if session_name is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            session_name = f"chat_{timestamp}"
        
        self.log_file = self.log_dir / f"{session_name}.log"
        self.enabled = True
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ª–æ–≥–∞
        self._write_header()
    
    def _write_header(self):
        """–ó–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ª–æ–≥–∞"""
        header = f"""{'=' * 80}
CHAT LOG - AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ü–ê–û ¬´–¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å¬ª
–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
{'=' * 80}

"""
        self._write_to_file(header)
    
    def _write_to_file(self, text: str):
        """–ó–∞–ø–∏—Å—å —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª"""
        if not self.enabled:
            return
        
        try:
            with open(self.log_file, 'a', encoding='utf-8') as f:
                f.write(text)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")
    
    def log_user_message(self, message: str, source: str = "text"):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ (text/voice/gesture)
        """
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        source_emoji = {
            "text": "üí¨",
            "voice": "üé§",
            "gesture": "üëã"
        }.get(source, "üìù")
        
        log_entry = f"""
{'‚îÄ' * 80}
[{timestamp}] {source_emoji} –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ({source}):
{message}
"""
        self._write_to_file(log_entry)
    
    def log_assistant_thinking(self, thinking: str):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π AI (thinking)
        
        Args:
            thinking: –¢–µ–∫—Å—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
        """
        if not thinking:
            return
        
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        log_entry = f"""
[{timestamp}] üí≠ AI –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø (Thinking):
{thinking}
"""
        self._write_to_file(log_entry)
    
    def log_assistant_answer(self, answer: str):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ AI
        
        Args:
            answer: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        """
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        log_entry = f"""
[{timestamp}] ü§ñ AI –û–¢–í–ï–¢:
{answer}
"""
        self._write_to_file(log_entry)
    
    def log_error(self, error: str):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        
        Args:
            error: –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        """
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        log_entry = f"""
[{timestamp}] ‚ùå –û–®–ò–ë–ö–ê:
{error}
"""
        self._write_to_file(log_entry)
    
    def log_system_event(self, event: str):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            event: –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        """
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        log_entry = f"""
[{timestamp}] ‚öôÔ∏è –°–ò–°–¢–ï–ú–ê:
{event}
"""
        self._write_to_file(log_entry)
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–≥–∞"""
        footer = f"""
{'=' * 80}
–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {self.log_file}
{'=' * 80}
"""
        self._write_to_file(footer)
        print(f"üìÑ –õ–æ–≥ –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {self.log_file}")
