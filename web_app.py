"""
Flask Web Application –¥–ª—è AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π streaming, –≥–æ–ª–æ—Å–∞ –∏ –∫–∞–º–µ—Ä—ã
"""

from flask import Flask, render_template, request, jsonify, Response, stream_with_context
import json
import time
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ main.py
sys.path.insert(0, str(Path(__file__).parent))

from main import ThinkingLLM, LLMConfig
from audio_handler import AudioHandler
from vision_handler import VisionHandler
from chat_logger import ChatLogger

app = Flask(__name__)
app.config['SECRET_KEY'] = 'transneft-ai-consultant-2025'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
config = LLMConfig()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
llm = ThinkingLLM(config)
audio_handler = AudioHandler()
vision_handler = VisionHandler()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è web-—Å–µ—Å—Å–∏–∏
chat_logger = ChatLogger(session_name="web_session")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
recognized_text_queue = []
gesture_text_queue = []

def on_text_recognized_callback(text: str):
    """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    global recognized_text_queue
    recognized_text_queue.append(text)
    print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –≤ –æ—á–µ—Ä–µ–¥—å: {text}")

def on_gesture_confirmed_callback(text: str):
    """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤"""
    global gesture_text_queue
    gesture_text_queue.append(text)
    print(f"üëã –î–æ–±–∞–≤–ª–µ–Ω –∂–µ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥—å: {text}")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –≤ audio_handler
audio_handler._on_text_recognized = on_text_recognized_callback

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –∂–µ—Å—Ç–æ–≤
vision_handler.set_gesture_callback(on_gesture_confirmed_callback)

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/api/chat', methods=['POST'])
def chat():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞ —Å streaming"""
    data = request.json
    message = data.get('message', '')
    source = data.get('source', 'text')  # text/voice/gesture
    
    if not message:
        return jsonify({'error': '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}), 400
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_logger.log_user_message(message, source)
    
    # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤ –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    gesture_was_active = vision_handler.is_vision_active and not vision_handler.is_paused
    if gesture_was_active:
        print("‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤ –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI")
        vision_handler.pause_analysis()
    
    def generate():
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è streaming –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_dict = llm.generate_response(message)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º thinking –∏ answer –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            thinking_content = response_dict.get('thinking', '')
            final_answer = response_dict.get('answer', '')
            
            # –õ–æ–≥–∏—Ä—É–µ–º thinking –∏ –æ—Ç–≤–µ—Ç
            chat_logger.log_assistant_thinking(thinking_content)
            chat_logger.log_assistant_answer(final_answer)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º thinking
            if thinking_content:
                yield f"data: {json.dumps({'type': 'thinking', 'content': thinking_content})}\n\n"
                time.sleep(0.1)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
            sentences = final_answer.split('. ')
            accumulated = ""
            
            for i, sentence in enumerate(sentences):
                if sentence.strip():
                    accumulated += sentence
                    if i < len(sentences) - 1:
                        accumulated += '. '
                    
                    yield f"data: {json.dumps({'type': 'answer', 'content': accumulated})}\n\n"
                    time.sleep(0.1)
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            yield f"data: {json.dumps({'type': 'done'})}\n\n"
        finally:
            # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if gesture_was_active:
                print("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI")
                vision_handler.resume_analysis()
    
    return Response(stream_with_context(generate()), mimetype='text/event-stream')

@app.route('/api/voice/start', methods=['POST'])
def start_voice():
    """
    –ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–∞—É–∑
    - 2 —Å–µ–∫ –º–æ–ª—á–∞–Ω–∏—è ‚Üí –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    - 5 —Å–µ–∫ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è ‚Üí –ø–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
    """
    try:
        result = audio_handler.start_listening()
        return jsonify(result)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –≥–æ–ª–æ—Å–∞: {e}")
        return jsonify({'status': 'error', 'error': str(e)}), 500

@app.route('/api/voice/stop', methods=['POST'])
def stop_voice():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞"""
    try:
        text = audio_handler.stop_listening()
        return jsonify({'status': 'stopped', 'text': text or ''})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        return jsonify({'status': 'error', 'error': str(e)}), 500

@app.route('/api/voice/resume', methods=['POST'])
def resume_voice():
    """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
    try:
        result = audio_handler.resume_listening()
        return jsonify(result)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞: {e}")
        return jsonify({'status': 'error', 'error': str(e)}), 500

@app.route('/api/voice/get-text', methods=['GET'])
def get_recognized_text():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (long polling)
    –ö–ª–∏–µ–Ω—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç endpoint
    """
    global recognized_text_queue
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∑–∞–ø–∏—Å—å
        if not audio_handler.is_listening:
            return jsonify({'status': 'stopped', 'message': '–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'})
        
        if recognized_text_queue:
            text = recognized_text_queue.pop(0)
            return jsonify({'status': 'text_available', 'text': text})
        else:
            return jsonify({'status': 'no_text'})
    except Exception as e:
        return jsonify({'status': 'error', 'error': str(e)}), 500

@app.route('/api/tts/speak', methods=['POST'])
def speak_text():
    """
    –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ TTS
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON: {"text": "—Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏"}
    """
    try:
        data = request.get_json()
        text = data.get('text', '')
        
        if not text:
            return jsonify({'status': 'error', 'error': '–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç'}), 400
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        import re
        # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ (Unicode –¥–∏–∞–ø–∞–∑–æ–Ω—ã)
        text_cleaned = re.sub(r'[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F700-\U0001F77F\U0001F780-\U0001F7FF\U0001F800-\U0001F8FF\U0001F900-\U0001F9FF\U0001FA00-\U0001FA6F\U0001FA70-\U0001FAFF\U00002702-\U000027B0\U000024C2-\U0001F251]+', '', text)
        # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
        text_cleaned = re.sub(r'!+', '.', text_cleaned)
        # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
        text_cleaned = re.sub(r'\?+', '?', text_cleaned)
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text_cleaned = re.sub(r'\s+', ' ', text_cleaned).strip()
        
        if not text_cleaned:
            return jsonify({'status': 'skipped', 'message': '–¢–µ–∫—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤'})
        
        print(f"üîä –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ: {text_cleaned}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∑–≤—É—á–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        result = audio_handler.speak_answer(text_cleaned, play_async=True)
        
        return jsonify({'status': 'started', 'message': result or '–û–∑–≤—É—á–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞'})
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")
        return jsonify({'status': 'error', 'error': str(e)}), 500

@app.route('/api/gesture/get-text', methods=['GET'])
def get_gesture_text():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∂–µ—Å—Ç–æ–≤ (long polling)
    –ö–ª–∏–µ–Ω—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç endpoint
    """
    global gesture_text_queue
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∫–∞–º–µ—Ä–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É)
        camera_handler = vision_handler.camera_handler
        if not camera_handler.capture_thread or not camera_handler.capture_thread.is_alive():
            return jsonify({'status': 'stopped', 'message': '–ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—Ç–∞–π–º–∞—É—Ç 7 —Å–µ–∫)'})
        
        if gesture_text_queue:
            text = gesture_text_queue.pop(0)
            return jsonify({'status': 'text_available', 'text': text})
        else:
            return jsonify({'status': 'no_text'})
    except Exception as e:
        return jsonify({'status': 'error', 'error': str(e)}), 500

@app.route('/api/camera/start', methods=['POST'])
def start_camera():
    """–ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã –∏ –∞–Ω–∞–ª–∏–∑–∞ –∂–µ—Å—Ç–æ–≤"""
    try:
        if vision_handler.start_real_time_analysis():
            return jsonify({'status': 'started', 'message': '–ö–∞–º–µ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∂–µ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω—ã'})
        else:
            return jsonify({'status': 'error', 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—ã'}), 500
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã: {e}")
        return jsonify({'status': 'error', 'error': str(e)}), 500

@app.route('/api/camera/stop', methods=['POST'])
def stop_camera():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã –∏ –∞–Ω–∞–ª–∏–∑–∞ –∂–µ—Å—Ç–æ–≤"""
    try:
        vision_handler.stop_real_time_analysis()
        return jsonify({'status': 'stopped', 'message': '–ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä—ã: {e}")
        return jsonify({'status': 'error', 'error': str(e)}), 500

@app.route('/api/camera/frame')
def get_camera_frame():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64"""
    try:
        frame = vision_handler.get_current_frame()
        if frame is not None:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º numpy array –≤ JPEG
            import cv2
            import base64
            _, buffer = cv2.imencode('.jpg', frame)
            frame_base64 = base64.b64encode(buffer.tobytes()).decode('utf-8')
            
            return jsonify({
                'status': 'success',
                'frame': frame_base64,
                'format': 'base64_jpeg'
            })
        return jsonify({'status': 'error', 'error': '–ù–µ—Ç –∫–∞–¥—Ä–∞'}), 404
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–∞: {e}")
        return jsonify({'status': 'error', 'error': str(e)}), 500

@app.route('/api/reset', methods=['POST'])
def reset_context():
    """–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞)"""
    try:
        llm.clear_history()
        return jsonify({'status': 'success', 'message': '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å...")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:5000")
    app.run(debug=False, host='0.0.0.0', port=5000, use_reloader=False)
