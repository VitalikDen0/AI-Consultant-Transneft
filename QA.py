"""
QA Benchmark - –ë–µ–Ω—á–º–∞—Ä–∫ –ø–æ —Ñ–∞–π–ª—É gobench.md
–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –Ω–∞ 17 –≤–æ–ø—Ä–æ—Å–∞—Ö –æ –¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å
"""

import re
from datetime import datetime
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ main.py
sys.path.insert(0, str(Path(__file__).parent))

from main import ThinkingLLM, LLMConfig


class QABenchmark:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø–æ gobench.md"""
    
    def __init__(self, questions_file: str = "gobench.md", log_file: str = None):
        self.questions_file = questions_file
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        if log_file is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            self.log_file = f"qa_benchmark_{timestamp}.log"
        else:
            self.log_file = log_file
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PROMPT.md –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM...")
        config = LLMConfig()
        self.llm = ThinkingLLM(config)
        
        # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç–∞–º (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É)
        self.requirements = """
**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç–∞–º:**
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è, —Ç–æ—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–æ–¥, –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, —Ü–∏—Ñ—Ä—ã (–∫–∏–ª–æ–º–µ—Ç—Ä—ã, –º–µ–≥–∞—Ç–æ–Ω–Ω—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∞–¥—Ä–µ—Å–∞ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã)
- –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞—Å—á—ë—Ç–Ω—ã—Ö ‚Äî –≤—ã–≤–µ—Å—Ç–∏ —Ñ–æ—Ä–º—É–ª—ã –∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω ‚Äî —á—ë—Ç–∫–æ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç (–≥–¥–µ –Ω–µ—Ç ‚Äî —è—Å–Ω–æ –æ–±–æ–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫)
"""
        
        print(f"üìù –§–∞–π–ª –≤–æ–ø—Ä–æ—Å–æ–≤: {self.questions_file}")
        print(f"üìÑ –õ–æ–≥-—Ñ–∞–π–ª: {self.log_file}")
    
    def parse_questions(self) -> list[dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ gobench.md"""
        try:
            with open(self.questions_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å **–Ω–æ–º–µ—Ä.**)
            pattern = r'\*\*(\d+)\.\s+([^\*]+(?:\n(?!\*\*\d+\.)[^\*]*)*)'
            matches = re.finditer(pattern, content, re.MULTILINE)
            
            questions = []
            for match in matches:
                question_num = match.group(1)
                question_text = match.group(2).strip()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å –Ω–æ–º–µ—Ä–æ–º
                full_question = f"**–í–æ–ø—Ä–æ—Å {question_num}:**\n{question_text}\n\n{self.requirements}"
                questions.append({
                    'number': question_num,
                    'text': question_text,
                    'full': full_question
                })
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 17 –≤–æ–ø—Ä–æ—Å–æ–≤
            if len(questions) != 17:
                print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö 17!")
                print(f"–ù–æ–º–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {[q['number'] for q in questions]}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                found_nums = set(int(q['number']) for q in questions)
                expected_nums = set(range(1, 18))
                missing = expected_nums - found_nums
                
                if missing:
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: {sorted(missing)}")
                    print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ gobench.md!")
                    print("–ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å **–Ω–æ–º–µ—Ä.** –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ")
            
            return questions
        
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {self.questions_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return []
    
    def log_message(self, message: str, console: bool = True):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å"""
        if console:
            print(message)
        
        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(message + '\n')
    
    def run_benchmark(self):
        """–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–æ–≤
        questions = self.parse_questions()
        
        if not questions:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞")
            return
        
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤\n")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ª–æ–≥-—Ñ–∞–π–ª–µ
        separator = "=" * 80
        header = f"""
{separator}
QA BENCHMARK - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ –ü–ê–û ¬´–¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å¬ª
–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
–ú–æ–¥–µ–ª—å: {self.llm.config.model_path}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}
{separator}

"""
        self.log_message(header, console=False)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        for i, q in enumerate(questions, 1):
            question_header = f"\n{'=' * 80}\nüìã –í–û–ü–†–û–° {q['number']}/{len(questions)}\n{'=' * 80}\n"
            self.log_message(question_header)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            self.log_message(f"\n{q['text']}\n")
            self.log_message(f"{'‚îÄ' * 80}\n")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            print(f"ü§î –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å {q['number']}...")
            try:
                response = self.llm.generate_response(q['full'])
                
                # –õ–æ–≥–∏—Ä—É–µ–º thinking (–µ—Å–ª–∏ –µ—Å—Ç—å)
                thinking = response.get('thinking', '')
                if thinking:
                    self.log_message("üí≠ –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø (Thinking):\n", console=False)
                    self.log_message(thinking + "\n", console=False)
                    self.log_message(f"{'‚îÄ' * 80}\n", console=False)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                answer = response.get('answer', '')
                self.log_message("‚úÖ –û–¢–í–ï–¢:\n")
                self.log_message(answer + "\n")
                
                print(f"‚úÖ –í–æ–ø—Ä–æ—Å {q['number']} –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n")
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}\n"
                self.log_message(error_msg)
                print(error_msg)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        footer = f"""
{separator}
–ë–ï–ù–ß–ú–ê–†–ö –ó–ê–í–ï–†–®–Å–ù
–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.log_file}
{separator}
"""
        self.log_message(footer)
        
        print(f"\nüéâ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à—ë–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª–µ: {self.log_file}")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë          QA BENCHMARK - –ü–ê–û ¬´–¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å¬ª                     ‚ïë
‚ïë          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –Ω–∞ 17 –≤–æ–ø—Ä–æ—Å–∞—Ö                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞
    benchmark = QABenchmark()
    benchmark.run_benchmark()


if __name__ == "__main__":
    main()
