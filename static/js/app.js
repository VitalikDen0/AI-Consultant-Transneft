// AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å - Web Application

import { Character3D } from './character3d.js';

class TransneftAssistant {
    constructor() {
        this.messagesArea = document.getElementById('messagesArea');
        this.messageInput = document.getElementById('messageInput');
        this.sendButton = document.getElementById('sendButton');
        this.micButton = document.getElementById('micButton');
        this.cameraButton = document.getElementById('cameraButton');
        this.speakerButton = document.getElementById('speakerButton');
        this.thinkingPanel = document.getElementById('thinkingPanel');
        this.thinkingContent = document.getElementById('thinkingContent');
        this.statusText = document.getElementById('statusText');
        this.voiceIndicator = document.getElementById('voiceIndicator');
        this.cameraIndicator = document.getElementById('cameraIndicator');
        
        this.isVoiceActive = false;
        this.isCameraActive = false;
        this.isSpeakerActive = false; // –û–∑–≤—É—á–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞/–≤—ã–∫–ª—é—á–µ–Ω–∞
        this.isProcessing = false;
        this.voicePollingInterval = null; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–ø—Ä–æ—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        this.gesturePollingInterval = null; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–ø—Ä–æ—Å–∞ –∂–µ—Å—Ç–æ–≤
        
        // 3D –ü–µ—Ä—Å–æ–Ω–∞–∂
        this.character3d = null;
        
        this.init();
    }
    
    async init() {
        // –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await this.resetContext();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        this.init3DCharacter();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.sendButton.addEventListener('click', () => this.sendMessage());
        this.messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });
        
        this.micButton.addEventListener('click', () => this.toggleVoice());
        this.cameraButton.addEventListener('click', () => this.toggleCamera());
        this.speakerButton.addEventListener('click', () => this.toggleSpeaker());
        
        // –ê–≤—Ç–æ-—Ä–µ—Å–∞–π–∑ textarea
        this.messageInput.addEventListener('input', () => {
            this.messageInput.style.height = 'auto';
            this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 120) + 'px';
        });
    }
    
    init3DCharacter() {
        console.log('üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...');
        const container = document.getElementById('character3dContainer');
        
        if (!container) {
            console.warn('‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è 3D –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        if (typeof Character3D === 'undefined') {
            console.error('‚ùå Character3D –∫–ª–∞—Å—Å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return;
        }
        
        try {
            this.character3d = new Character3D(container);
            
            // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            setTimeout(() => {
                if (this.character3d) {
                    this.character3d.greet();
                    this.updateStatus('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã');
                    setTimeout(() => this.updateStatus('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ'), 2000);
                }
            }, 1000);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ 3D –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
        }
    }
    
    updateStatus(text) {
        this.statusText.textContent = text;
    }
    
    async sendMessage(source = 'text') {
        const message = this.messageInput.value.trim();
        if (!message || this.isProcessing) return;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.addMessage(message, true);
        this.messageInput.value = '';
        this.messageInput.style.height = 'auto';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥
        this.setProcessing(true);
        this.setStatus('thinking', '–†–∞–∑–º—ã—à–ª—è—é...');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—á–∞—Ç–∏ –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç–µ
        if (this.character3d) {
            this.character3d.startThinking();
        }
        
        try {
            // Fetch –¥–ª—è streaming –æ—Ç–≤–µ—Ç–æ–≤
            const response = await fetch('/api/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                    message: message,
                    source: source  // text/voice/gesture
                })
            });
            
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let buffer = '';
            let lastAnswerBubble = null;
            let fullAnswerText = ''; // –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
            
            while (true) {
                const { done, value } = await reader.read();
                if (done) break;
                
                buffer += decoder.decode(value, { stream: true });
                const lines = buffer.split('\n\n');
                buffer = lines.pop() || '';
                
                for (const line of lines) {
                    if (!line.trim() || !line.startsWith('data: ')) continue;
                    
                    try {
                        const data = JSON.parse(line.slice(6));
                        
                        if (data.type === 'thinking') {
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º thinking
                            this.showThinking(data.content);
                        } else if (data.type === 'answer') {
                            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
                            if (!lastAnswerBubble) {
                                lastAnswerBubble = this.addMessage('', false, true);
                                this.hideThinking();
                                this.setStatus('speaking', '–û—Ç–≤–µ—á–∞—é...');
                                
                                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é –∂–µ—Å—Ç–∏–∫—É–ª—è—Ü–∏–∏
                                if (this.character3d) {
                                    this.character3d.startAnswering();
                                }
                            }
                            fullAnswerText = data.content; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
                            this.updateMessage(lastAnswerBubble, data.content);
                        } else if (data.type === 'done') {
                            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                            this.setStatus('idle', '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
                            this.setProcessing(false);
                            
                            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—Ç –∫ idle
                            if (this.character3d) {
                                this.character3d.stopAnimation();
                            }
                            
                            // –û–∑–≤—É—á–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–æ–∑–≤—É—á–∫–∞
                            if (fullAnswerText && this.isSpeakerActive) {
                                await this.speakText(fullAnswerText);
                            }
                            
                            // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã
                            await this.resumeVoiceAfterAnswer();
                            await this.resumeGestureAfterAnswer();
                        }
                    } catch (e) {
                        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', e);
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            this.addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.', false);
            this.setStatus('idle', '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            this.setProcessing(false);
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (this.character3d) {
                this.character3d.stopAnimation();
            }
        }
    }
    
    addMessage(text, isUser = false, isStreaming = false) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isUser ? 'user' : 'assistant'}`;
        
        const bubbleDiv = document.createElement('div');
        bubbleDiv.className = 'message-bubble';
        
        if (!isUser) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–≤–∞—Ç–∞—Ä–æ–º
            const headerDiv = document.createElement('div');
            headerDiv.className = 'message-header';
            headerDiv.innerHTML = `
                <span class="avatar">üë®‚Äçüíº</span>
                <span class="name">AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</span>
            `;
            bubbleDiv.appendChild(headerDiv);
        }
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        
        if (isStreaming) {
            // –î–æ–±–∞–≤–ª—è–µ–º typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            contentDiv.innerHTML = `
                <div class="typing-indicator">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            `;
        } else {
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown
            const paragraphs = text.split('\n').filter(p => p.trim());
            contentDiv.innerHTML = paragraphs.map(p => `<p>${this.formatMarkdown(p)}</p>`).join('');
        }
        
        bubbleDiv.appendChild(contentDiv);
        messageDiv.appendChild(bubbleDiv);
        this.messagesArea.appendChild(messageDiv);
        
        // –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑
        this.scrollToBottom();
        
        return contentDiv;
    }
    
    updateMessage(contentDiv, text) {
        // –£–±–∏—Ä–∞–µ–º typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        const typingIndicator = contentDiv.querySelector('.typing-indicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown
        const paragraphs = text.split('\n').filter(p => p.trim());
        contentDiv.innerHTML = paragraphs.map(p => `<p>${this.formatMarkdown(p)}</p>`).join('');
        
        // –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑
        this.scrollToBottom();
    }
    
    showThinking(content) {
        this.thinkingPanel.style.display = 'block';
        this.thinkingContent.textContent = '';
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
        let index = 0;
        const interval = setInterval(() => {
            if (index < content.length) {
                this.thinkingContent.textContent += content[index];
                index++;
            } else {
                clearInterval(interval);
            }
        }, 10);
    }
    
    hideThinking() {
        // –ü–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
        this.thinkingPanel.style.transition = 'opacity 0.5s ease-out';
        this.thinkingPanel.style.opacity = '0';
        
        setTimeout(() => {
            this.thinkingPanel.style.display = 'none';
            this.thinkingPanel.style.opacity = '1';
        }, 500);
    }
    
    setStatus(state, text) {
        if (this.statusText) {
            this.statusText.textContent = text;
        }
        
        // –≠–º–æ–¥–∑–∏ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ 3D –ø–µ—Ä—Å–æ–Ω–∞–∂
    }
    
    setProcessing(isProcessing) {
        this.isProcessing = isProcessing;
        this.messageInput.disabled = isProcessing;
        this.sendButton.disabled = isProcessing;
        
        if (isProcessing) {
            this.sendButton.style.opacity = '0.6';
            this.sendButton.style.cursor = 'not-allowed';
        } else {
            this.sendButton.style.opacity = '1';
            this.sendButton.style.cursor = 'pointer';
        }
    }
    
    async toggleVoice() {
        this.isVoiceActive = !this.isVoiceActive;
        
        if (this.isVoiceActive) {
            this.micButton.classList.add('active');
            this.voiceIndicator.classList.add('active');
            this.setStatus('listening', '–°–ª—É—à–∞—é... (2 —Å–µ–∫ –º–æ–ª—á–∞–Ω–∏—è ‚Üí –æ—Ç–ø—Ä–∞–≤–∫–∞, 5 —Å–µ–∫ ‚Üí –≤—ã–∫–ª)');
            
            try {
                const response = await fetch('/api/voice/start', { method: 'POST' });
                const data = await response.json();
                
                if (data.status === 'started') {
                    console.log('üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                    // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    this.startVoicePolling();
                } else {
                    console.error('–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞:', data);
                    this.isVoiceActive = false;
                    this.micButton.classList.remove('active');
                    this.voiceIndicator.classList.remove('active');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–æ–ª–æ—Å–∞:', error);
                this.isVoiceActive = false;
                this.micButton.classList.remove('active');
                this.voiceIndicator.classList.remove('active');
            }
        } else {
            this.micButton.classList.remove('active');
            this.voiceIndicator.classList.remove('active');
            this.setStatus('idle', '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            this.stopVoicePolling();
            
            try {
                await fetch('/api/voice/stop', { method: 'POST' });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ–ª–æ—Å–∞:', error);
            }
        }
    }
    
    startVoicePolling() {
        // –û–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∫–∞–∂–¥—ã–µ 500ms –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        this.voicePollingInterval = setInterval(async () => {
            try {
                const response = await fetch('/api/voice/get-text');
                const data = await response.json();
                
                if (data.status === 'text_available' && data.text) {
                    console.log('üó£Ô∏è –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç:', data.text);
                    
                    // –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú POLLING –ù–ê –í–†–ï–ú–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–¢–í–ï–¢–ê
                    this.stopVoicePolling();
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                    this.messageInput.value = data.text;
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                    await this.sendMessage('voice');
                    
                    // –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å (—Å–º. sendMessage)
                } else if (data.status === 'stopped') {
                    // –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—Ç–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥) - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º polling
                    console.log('‚è∞ –¢–∞–π–º–∞—É—Ç - –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
                    this.stopVoicePolling();
                    
                    // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
                    this.isVoiceActive = false;
                    this.micButton.classList.remove('active');
                    this.voiceIndicator.classList.remove('active');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    this.showNotification('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ç–∞–π–º–∞—É—Ç 5 —Å–µ–∫)', 'warning');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:', error);
            }
        }, 500);
    }
    
    stopVoicePolling() {
        if (this.voicePollingInterval) {
            clearInterval(this.voicePollingInterval);
            this.voicePollingInterval = null;
        }
    }
    
    startGesturePolling() {
        // –û–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∫–∞–∂–¥—ã–µ 500ms –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤
        this.gesturePollingInterval = setInterval(async () => {
            try {
                const response = await fetch('/api/gesture/get-text');
                const data = await response.json();
                
                if (data.status === 'text_available' && data.text) {
                    console.log('üëã –ü–æ–ª—É—á–µ–Ω –∂–µ—Å—Ç:', data.text);
                    
                    // –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú POLLING –ù–ê –í–†–ï–ú–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–¢–í–ï–¢–ê
                    this.stopGesturePolling();
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                    this.messageInput.value = data.text;
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                    await this.sendMessage('gesture');
                    
                    // –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∫–∞–º–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è (–≤ web_app.py)
                } else if (data.status === 'stopped') {
                    // –ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—Ç–∞–π–º–∞—É—Ç 7 —Å–µ–∫—É–Ω–¥) - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º polling
                    console.log('‚è∞ –¢–∞–π–º–∞—É—Ç - –∫–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
                    this.stopGesturePolling();
                    
                    // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã
                    this.isCameraActive = false;
                    this.cameraButton.classList.remove('active');
                    this.cameraIndicator.classList.remove('active');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    this.showNotification('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (—Ç–∞–π–º–∞—É—Ç 7 —Å–µ–∫)', 'warning');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–µ—Å—Ç–∞:', error);
            }
        }, 500);
    }
    
    stopGesturePolling() {
        if (this.gesturePollingInterval) {
            clearInterval(this.gesturePollingInterval);
            this.gesturePollingInterval = null;
        }
    }
    
    async resumeGestureAfterAnswer() {
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        if (this.isCameraActive && this.cameraButton.classList.contains('active')) {
            console.log('üìπ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –∂–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞');
            // –ö–∞–º–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ backend (web_app.py)
            // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å
            this.startGesturePolling();
        }
    }
    
    async resumeVoiceAfterAnswer() {
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if (this.isVoiceActive && this.micButton.classList.contains('active')) {
            try {
                const response = await fetch('/api/voice/resume', { method: 'POST' });
                const data = await response.json();
                
                if (data.status === 'started' || data.status === 'already_listening') {
                    console.log('üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞');
                    // –í–û–ó–û–ë–ù–û–í–õ–Ø–ï–ú POLLING –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
                    this.startVoicePolling();
                } else {
                    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å:', data);
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º UI
                    this.isVoiceActive = false;
                    this.micButton.classList.remove('active');
                    this.voiceIndicator.classList.remove('active');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞:', error);
                // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º UI
                this.isVoiceActive = false;
                this.micButton.classList.remove('active');
                this.voiceIndicator.classList.remove('active');
            }
        } else {
            console.log('‚ÑπÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω - –ø—Ä–æ–ø—É—Å–∫ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
    }
    
    toggleSpeaker() {
        this.isSpeakerActive = !this.isSpeakerActive;
        
        if (this.isSpeakerActive) {
            this.speakerButton.classList.add('active');
            console.log('üîä –ê–≤—Ç–æ–æ–∑–≤—É—á–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞');
        } else {
            this.speakerButton.classList.remove('active');
            console.log('üîá –ê–≤—Ç–æ–æ–∑–≤—É—á–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞');
        }
    }
    
    async speakText(text) {
        /**
         * –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ TTS
         * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
         */
        if (!this.isSpeakerActive || !text || !text.trim()) {
            return;
        }
        
        try {
            console.log('üîä –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –æ–∑–≤—É—á–∫—É:', text.substring(0, 50) + '...');
            
            const response = await fetch('/api/tts/speak', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ text: text })
            });
            
            const data = await response.json();
            
            if (data.status === 'started') {
                console.log('‚úÖ –û–∑–≤—É—á–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞');
            } else if (data.status === 'skipped') {
                console.log('‚è≠Ô∏è –û–∑–≤—É—á–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞:', data.message);
            } else {
                console.warn('‚ö†Ô∏è –û–∑–≤—É—á–∫–∞:', data);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏:', error);
        }
    }
    
    async toggleCamera() {
        this.isCameraActive = !this.isCameraActive;
        
        if (this.isCameraActive) {
            this.cameraButton.classList.add('active');
            this.cameraIndicator.classList.add('active');
            this.setStatus('camera', '–ö–∞–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤ (7 —Å–µ–∫ ‚Üí –≤—ã–∫–ª)');
            
            try {
                const response = await fetch('/api/camera/start', { method: 'POST' });
                const data = await response.json();
                
                if (data.status === 'started') {
                    console.log('üìπ –ö–∞–º–µ—Ä–∞ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');
                    // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤
                    this.startGesturePolling();
                } else {
                    console.error('–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –∫–∞–º–µ—Ä—ã:', data);
                    this.isCameraActive = false;
                    this.cameraButton.classList.remove('active');
                    this.cameraIndicator.classList.remove('active');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã:', error);
                this.isCameraActive = false;
                this.cameraButton.classList.remove('active');
                this.cameraIndicator.classList.remove('active');
            }
        } else {
            this.cameraButton.classList.remove('active');
            this.cameraIndicator.classList.remove('active');
            this.setStatus('idle', '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            this.stopGesturePolling();
            
            try {
                await fetch('/api/camera/stop', { method: 'POST' });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä—ã:', error);
            }
        }
    }
    
    scrollToBottom() {
        this.messagesArea.scrollTop = this.messagesArea.scrollHeight;
    }
    
    showNotification(message, type = 'info') {
        /**
         * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
         * type: 'info', 'success', 'warning', 'error'
         */
        console.log(`üì¢ [${type.toUpperCase()}] ${message}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const originalStatus = this.statusText.textContent;
        const icons = {
            'info': '‚ÑπÔ∏è',
            'success': '‚úÖ',
            'warning': '‚ö†Ô∏è',
            'error': '‚ùå'
        };
        
        this.setStatus('idle', `${icons[type] || '‚ÑπÔ∏è'} ${message}`);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (!this.isProcessing) {
                this.setStatus('idle', '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            }
        }, 3000);
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    formatMarkdown(text) {
        /**
         * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown –≤ HTML
         * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
         * - **–∂–∏—Ä–Ω—ã–π** ‚Üí <strong>–∂–∏—Ä–Ω—ã–π</strong>
         * - *–∫—É—Ä—Å–∏–≤* ‚Üí <em>–∫—É—Ä—Å–∏–≤</em>
         * - ***–∂–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤*** ‚Üí <strong><em>–∂–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤</em></strong>
         * - `–∫–æ–¥` ‚Üí <code>–∫–æ–¥</code>
         * - ```–∫–æ–¥ –±–ª–æ–∫``` ‚Üí <pre><code>–∫–æ–¥ –±–ª–æ–∫</code></pre>
         * - # –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí <h3>–ó–∞–≥–æ–ª–æ–≤–æ–∫</h3>
         * - ## –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí <h4>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫</h4>
         * - [—Å—Å—ã–ª–∫–∞](url) ‚Üí <a href="url">—Å—Å—ã–ª–∫–∞</a>
         * - > —Ü–∏—Ç–∞—Ç–∞ ‚Üí <blockquote>—Ü–∏—Ç–∞—Ç–∞</blockquote>
         * - - —Å–ø–∏—Å–æ–∫ ‚Üí <ul><li>—Å–ø–∏—Å–æ–∫</li></ul>
         * - 1. —Å–ø–∏—Å–æ–∫ ‚Üí <ol><li>—Å–ø–∏—Å–æ–∫</li></ol>
         */
        
        // –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        let html = this.escapeHtml(text);
        
        // –ë–ª–æ–∫–∏ –∫–æ–¥–∞ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ –∏–Ω–ª–∞–π–Ω –∫–æ–¥–∞)
        html = html.replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>');
        
        // –ñ–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤ ***—Ç–µ–∫—Å—Ç***
        html = html.replace(/\*\*\*(.*?)\*\*\*/g, '<strong><em>$1</em></strong>');
        
        // –ñ–∏—Ä–Ω—ã–π **—Ç–µ–∫—Å—Ç**
        html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        
        // –ö—É—Ä—Å–∏–≤ *—Ç–µ–∫—Å—Ç* –∏–ª–∏ _—Ç–µ–∫—Å—Ç_
        html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');
        html = html.replace(/_(.*?)_/g, '<em>$1</em>');
        
        // –ò–Ω–ª–∞–π–Ω –∫–æ–¥ `—Ç–µ–∫—Å—Ç`
        html = html.replace(/`(.*?)`/g, '<code>$1</code>');
        
        // –ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π ~~—Ç–µ–∫—Å—Ç~~
        html = html.replace(/~~(.*?)~~/g, '<del>$1</del>');
        
        // –°—Å—ã–ª–∫–∏ [—Ç–µ–∫—Å—Ç](url)
        html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener">$1</a>');
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏
        html = html.replace(/^### (.*?)$/gm, '<h5>$1</h5>');
        html = html.replace(/^## (.*?)$/gm, '<h4>$1</h4>');
        html = html.replace(/^# (.*?)$/gm, '<h3>$1</h3>');
        
        // –¶–∏—Ç–∞—Ç—ã
        html = html.replace(/^&gt; (.*?)$/gm, '<blockquote>$1</blockquote>');
        
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        html = html.replace(/^---$/gm, '<hr>');
        html = html.replace(/^\*\*\*$/gm, '<hr>');
        
        return html;
    }
    
    async resetContext() {
        // –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try {
            const response = await fetch('/api/reset', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω');
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', await response.text());
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    const assistant = new TransneftAssistant();
    console.log('üöÄ AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω');
});
