/**
 * 3D –ü–µ—Ä—Å–æ–Ω–∞–∂ –¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Three.js –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
 */

import * as THREE from 'three';
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';

class Character3D {
    constructor(container) {
        this.container = container;
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.model = null;
        this.mixer = null;
        this.animations = {};
        this.currentAnimation = null;
        this.clock = new THREE.Clock();
        this.idleTimer = null;
        this.idleDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥
        
        this.init();
    }
    
    init() {
        console.log('üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...');
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
        this.scene = new THREE.Scene();
        this.scene.background = null; // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
        
        // –ö–∞–º–µ—Ä–∞ - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        const width = this.container.clientWidth;
        const height = this.container.clientHeight;
        this.camera = new THREE.PerspectiveCamera(50, width / height, 0.1, 100);
        this.camera.position.set(0, 2, 5); // –ö–∞–º–µ—Ä–∞ –≤—ã—à–µ (2) –∏ –¥–∞–ª—å—à–µ (5 –µ–¥–∏–Ω–∏—Ü)
        this.camera.lookAt(0, 1.7, 0); // –°–º–æ—Ç—Ä–∏—Ç —á—É—Ç—å –≤—ã—à–µ
        
        // –†–µ–Ω–¥–µ—Ä–µ—Ä
        this.renderer = new THREE.WebGLRenderer({ 
            alpha: true, 
            antialias: true 
        });
        this.renderer.setSize(width, height);
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.shadowMap.enabled = true;
        this.container.appendChild(this.renderer.domElement);
        
        // –û—Å–≤–µ—â–µ–Ω–∏–µ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —è—Ä–∫–æ—Å—Ç—å)
        const ambientLight = new THREE.AmbientLight(0xffffff, 1.0); // –ë—ã–ª–æ 0.6
        this.scene.add(ambientLight);
        
        const directionalLight = new THREE.DirectionalLight(0xffffff, 1.5); // –ë—ã–ª–æ 0.8
        directionalLight.position.set(5, 10, 7.5);
        directionalLight.castShadow = true;
        this.scene.add(directionalLight);
        
        const fillLight = new THREE.DirectionalLight(0x4A9EFF, 0.5); // –ë—ã–ª–æ 0.3
        fillLight.position.set(-5, 5, -5);
        this.scene.add(fillLight);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–Ω–∏–∑—É
        const bottomLight = new THREE.DirectionalLight(0xffffff, 0.3);
        bottomLight.position.set(0, -5, 0);
        this.scene.add(bottomLight);
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        this.loadModel();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        window.addEventListener('resize', () => this.onResize());
        
        // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        this.animate();
    }
    
    loadModel() {
        console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...');
        
        const loader = new GLTFLoader();
        
        loader.load(
            '/static/models/transneft_character.glb',
            (gltf) => {
                console.log('‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                this.model = gltf.scene;
                
                // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏
                const box = new THREE.Box3().setFromObject(this.model);
                const size = box.getSize(new THREE.Vector3());
                const center = box.getCenter(new THREE.Vector3());
                
                console.log('üìè –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏:', size);
                console.log('üìç –¶–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏:', center);
                
                // FBX –º–æ–¥–µ–ª—å –∏–∑ Mixamo —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ - –Ω–µ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º!
                // (OBJ —Ç—Ä–µ–±–æ–≤–∞–ª –ø–æ–≤–æ—Ä–æ—Ç–∞, FBX - –Ω–µ—Ç)
                
                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–º–µ—Ä (–¥–µ–ª–∞–µ–º –º–æ–¥–µ–ª—å –≤—ã—Å–æ—Ç–æ–π ~2 –µ–¥–∏–Ω–∏—Ü—ã)
                const maxSize = Math.max(size.x, size.y, size.z);
                const scale = 2 / maxSize;
                this.model.scale.set(scale, scale, scale);
                
                // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å:
                // - –ü–æ X –∏ Z —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
                // - –ü–æ Y —Å—Ç–∞–≤–∏–º –Ω–∞ —Å–µ—Ç–∫—É (–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ Y=0)
                this.model.position.set(
                    -center.x * scale,  // –¶–µ–Ω—Ç—Ä –ø–æ X
                    0,                   // –°—Ç–∞–≤–∏–º –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –∑–µ–º–ª–∏
                    -center.z * scale   // –¶–µ–Ω—Ç—Ä –ø–æ Z
                );
                
                console.log('üìê –ü—Ä–∏–º–µ–Ω–µ–Ω –º–∞—Å—à—Ç–∞–±:', scale);
                console.log('üìç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:', this.model.position);
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤/—Ç–µ–∫—Å—Ç—É—Ä
                this.model.traverse((child) => {
                    if (child.isMesh) {
                        console.log('üé® Mesh –Ω–∞–π–¥–µ–Ω:', child.name);
                        if (child.material) {
                            console.log('   –ú–∞—Ç–µ—Ä–∏–∞–ª:', child.material.type);
                            // –í–∫–ª—é—á–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                            if (child.material.map) {
                                child.material.map.needsUpdate = true;
                                console.log('   ‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞');
                            } else {
                                console.log('   ‚ö†Ô∏è –¢–µ–∫—Å—Ç—É—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                            }
                            child.material.needsUpdate = true;
                        }
                    }
                });
                
                this.scene.add(this.model);
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π
                if (gltf.animations && gltf.animations.length > 0) {
                    this.mixer = new THREE.AnimationMixer(this.model);
                    
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∏–º–∞—Ü–∏–π: ${gltf.animations.length}`);
                    
                    gltf.animations.forEach((clip) => {
                        console.log(`üé¨ –ù–∞–π–¥–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è: ${clip.name}`);
                        this.animations[clip.name] = this.mixer.clipAction(clip);
                    });
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                    this.greet();
                } else {
                    console.warn('‚ö†Ô∏è  –ê–Ω–∏–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–æ–¥–µ–ª–∏');
                }
                
                console.log('üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ –≥–æ—Ç–æ–≤!');
            },
            (progress) => {
                const percent = (progress.loaded / progress.total * 100).toFixed(0);
                console.log(`üìä –ó–∞–≥—Ä—É–∑–∫–∞: ${percent}%`);
            },
            (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:', error);
            }
        );
    }
    
    stopAllAnimations() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í–°–ï –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ T-pose
        if (this.mixer) {
            Object.values(this.animations).forEach(action => {
                action.stop();
                action.weight = 0;
            });
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º mixer –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.mixer.stopAllAction();
        }
    }
    
    playAnimation(name, loop = false) {
        console.log(`‚ñ∂Ô∏è  –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: ${name} (loop: ${loop})`);
        
        if (!this.mixer || !this.animations[name]) {
            console.warn(`‚ö†Ô∏è  –ê–Ω–∏–º–∞—Ü–∏—è '${name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏:', Object.keys(this.animations));
            return;
        }
        
        // –ü–û–õ–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ T-pose
        this.stopAllAnimations();
        
        // –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
        const action = this.animations[name];
        action.reset(); // –°–±—Ä–æ—Å –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        action.time = 0; // –í—Ä–µ–º—è –Ω–∞ 0
        action.weight = 1; // –ü–æ–ª–Ω—ã–π –≤–µ—Å
        action.setEffectiveWeight(1);
        action.setLoop(loop ? THREE.LoopRepeat : THREE.LoopOnce);
        action.clampWhenFinished = true;
        action.play();
        
        this.currentAnimation = action;
        
        // –°–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        if (!loop) {
            this.mixer.addEventListener('finished', (e) => {
                if (e.action === action) {
                    console.log(`‚úì –ê–Ω–∏–º–∞—Ü–∏—è '${name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
                    this.onAnimationFinished(name);
                }
            });
        }
    }
    
    onAnimationFinished(name) {
        // –ü–µ—Ä–µ—Ö–æ–¥ –≤ idle –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        console.log('üí§ –í–æ–∑–≤—Ä–∞—Ç –≤ idle —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        this.currentAnimation = null;
        this.resetIdleTimer();
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    startThinking() {
        console.log('ü§î –°–æ—Å—Ç–æ—è–Ω–∏–µ: –î—É–º–∞–µ—Ç');
        this.resetIdleTimer();
        this.playAnimation('Thinking', true);
    }
    
    startAnswering() {
        console.log('üí¨ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –û—Ç–≤–µ—á–∞–µ—Ç');
        this.resetIdleTimer();
        this.playAnimation('Talking', true);
    }
    
    stopAnimation() {
        console.log('‚è∏Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ - –¥–æ–∏–≥—Ä—ã–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞');
        
        // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç Talking, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –µ–≥–æ –≤ —Ä–µ–∂–∏–º "–æ–¥–∏–Ω —Ä–∞–∑"
        if (this.currentAnimation && this.animations['Talking'] === this.currentAnimation) {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º loop –Ω–∞ false - –∞–Ω–∏–º–∞—Ü–∏—è –¥–æ–∏–≥—Ä–∞–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞
            this.currentAnimation.setLoop(THREE.LoopOnce);
            this.currentAnimation.clampWhenFinished = true;
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            this.mixer.addEventListener('finished', (e) => {
                if (e.action === this.currentAnimation) {
                    console.log('‚úì Talking –∑–∞–≤–µ—Ä—à—ë–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –≤ Idle');
                    this.resetIdleTimer(); // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ Idle
                }
            }, { once: true }); // –û–¥–∏–Ω —Ä–∞–∑
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –∞–Ω–∏–º–∞—Ü–∏–π - –æ–±—ã—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            if (this.currentAnimation) {
                this.currentAnimation.fadeOut(0.5);
                this.currentAnimation = null;
            }
            this.resetIdleTimer();
        }
    }
    
    resetIdleTimer() {
        // –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä
        if (this.idleTimer) {
            clearTimeout(this.idleTimer);
        }
        
        // –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä - —á–µ—Ä–µ–∑ 5 —Å–µ–∫ –ø–æ–∫–∞–∑–∞—Ç—å Idle –∞–Ω–∏–º–∞—Ü–∏—é
        this.idleTimer = setTimeout(() => {
            console.log('üò¥ –ü—Ä–æ—Å—Ç–æ–π - –ø–µ—Ä–µ—Ö–æ–¥ –≤ Idle');
            this.playAnimation('Idle', true);
        }, this.idleDelay);
    }
    
    greet() {
        console.log('üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ');
        this.playAnimation('Hello', false);
    }
    
    animate() {
        requestAnimationFrame(() => this.animate());
        
        const delta = this.clock.getDelta();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π
        if (this.mixer) {
            this.mixer.update(delta);
        }
        
        // –õ—ë–≥–∫–æ–µ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∂–∏–≤–æ—Å—Ç–∏
        if (this.model && !this.currentAnimation) {
            const time = this.clock.getElapsedTime();
            this.model.rotation.y = Math.sin(time * 0.3) * 0.05;
            this.model.position.y = -0.5 + Math.sin(time * 0.5) * 0.02;
        }
        
        this.renderer.render(this.scene, this.camera);
    }
    
    onResize() {
        const width = this.container.clientWidth;
        const height = this.container.clientHeight;
        
        this.camera.aspect = width / height;
        this.camera.updateProjectionMatrix();
        
        this.renderer.setSize(width, height);
    }
    
    dispose() {
        console.log('üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ 3D —Ä–µ—Å—É—Ä—Å–æ–≤');
        
        if (this.mixer) {
            this.mixer.stopAllAction();
        }
        
        if (this.renderer) {
            this.renderer.dispose();
        }
        
        if (this.scene) {
            this.scene.traverse((object) => {
                if (object.geometry) {
                    object.geometry.dispose();
                }
                if (object.material) {
                    if (Array.isArray(object.material)) {
                        object.material.forEach(material => material.dispose());
                    } else {
                        object.material.dispose();
                    }
                }
            });
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export { Character3D };
